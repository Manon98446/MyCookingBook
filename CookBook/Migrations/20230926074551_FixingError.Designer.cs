// <auto-generated />
using System;
using CookBook.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CookBook.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230926074551_FixingError")]
    partial class FixingError
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CookBook.Models.CookingStyle", b =>
                {
                    b.Property<int>("CookingStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CookingStyleName")
                        .HasColumnType("longtext");

                    b.HasKey("CookingStyleId");

                    b.ToTable("CookingStyles");
                });

            modelBuilder.Entity("CookBook.Models.PlateType", b =>
                {
                    b.Property<int>("PlateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PlateName")
                        .HasColumnType("longtext");

                    b.HasKey("PlateId");

                    b.ToTable("PlateTypes");
                });

            modelBuilder.Entity("CookBook.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CookingStyleId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Ingredients")
                        .HasColumnType("longtext");

                    b.Property<string>("Instructions")
                        .HasColumnType("longtext");

                    b.Property<int>("NumPers")
                        .HasColumnType("int");

                    b.Property<int>("PlateId")
                        .HasColumnType("int");

                    b.Property<int?>("PlateTypePlateId")
                        .HasColumnType("int");

                    b.Property<string>("RecipeName")
                        .HasColumnType("longtext");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("RecipeId");

                    b.HasIndex("CookingStyleId");

                    b.HasIndex("PlateTypePlateId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("CookBook.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RecipeUsers", b =>
                {
                    b.Property<int>("RecipesRecipeId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("RecipesRecipeId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("RecipeUsers");
                });

            modelBuilder.Entity("CookBook.Models.Recipe", b =>
                {
                    b.HasOne("CookBook.Models.CookingStyle", "CookingStyle")
                        .WithMany("Recipes")
                        .HasForeignKey("CookingStyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookBook.Models.PlateType", "PlateType")
                        .WithMany("Recipes")
                        .HasForeignKey("PlateTypePlateId");

                    b.Navigation("CookingStyle");

                    b.Navigation("PlateType");
                });

            modelBuilder.Entity("RecipeUsers", b =>
                {
                    b.HasOne("CookBook.Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesRecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookBook.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CookBook.Models.CookingStyle", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("CookBook.Models.PlateType", b =>
                {
                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
